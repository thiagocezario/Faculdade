DS130 - Estruturas de dados:

Prof. Rodrigo Fiorin

rodrigo.fiorin@ufpr.br
prof.rodrigo.fiorin@gmail.com

Programa:
	- Manipulação de memória primária e secundária
	- Tipos de dados
	- Listas lineares
	- Listas circulares encadeadas
	- Listas duplamente encadeadas
	- Pilhas e filas particulares
	- Métodos de pesquisa de dados
	- Algoritmos de busca e ordenação
	- Organização e manipulação de arquivos
	
2 provas
3 trabalhos práticos

Referências:
	
	Celes, Waldemar - Introdução à estrutura de dados com técnicas de programação em C
	
	Silva, Osmar - Estrutura de dados e algoritmos usando C. Fundamentos e aplicação
	
	Pereira, Silvio do Iago - Estrutura de dados fundamentais. Conceito e aplicação
	
Datas importantes:
	02/03 -> Falta professor (atividade moodle)
	30/03 -> Feriado
	06/04 -> P1
	01/05 -> Feriado
	19/06 -> P2
	03/07 -> Final
	
	
	
27/02:

Senha do moodle: ds1302018n

*Atividade de pesquisa para 02/03~05/03 (período de entrega)

Estrutura de dados
	- Formas otimizadas e armazenamento e tratamento das informações na memória
	
Considerações na escolha das estruturas de dados:
	- Relacionado ao tipo de informação a ser armazenada
	- Métodos de manipulação
	- Tipo de alocação
	
Tipos de dados:
	Atômicos -> Indivisíveis
	Complexos -> Podem ser decompostos
	Homogêneos -> 1 tipo de dados
	Heterogêneo -> Múltiplos tipos de dados
	
Alocação:
	Estática -> Em tempo de carregamento
	Dinâmica -> Em tempo de execução
	
Alternativa da representação física:
	- Continuidade física
		Contíguas na memória
		
	+ Vantagens:
		- Alocação no início (proteção da memória)
		- Tranferência de dados (alocados em blocos)
		- Estruturas simples (ordem física)
		- Representação: semelhante à contiguidade física
		- Acesso direto
		
	+ Desvantagens
		- Não permite compartilhamento de memória
		- Precisão de espaço
		- Não é apropriado para estruturas complexas
		- Inserção e exclusão trabalhosas
		
		
+Encadeamento - alocação do endereço do próximo elemento

vantagens:
	-compartilhamento de memória
	-maleabilidade
	-inserção e remoção de dados
	
desvantagens:
	-transferência de dados
	-gerência de memória onerosa
	-acesso -> forma serial
	
------------------	
| S.O            |	memória alta
------------------
|cód do programa |
------------------
|dados (variaveis|
|globais e 		 |
|estáticas)      |
------------------
|Heap (memória   |
|gerenciamento   |
|dinâmico)       |
------------------
|		|		 |
|		v		 |
|		A		 |
|		|		 |
------------------
|pilha (parâme-  |
|tros de funções |	memória baixa
|e variaveis 	 |
|locais)		 |
------------------






								 ->booleanas   /->inteiras
				primitivas		 ->numéricas  //->reais
								 ->caracteres -> alfa numéricos
								 ->ponteiros 


estrutura de dados

																			-> bidimensional
										-> comprimento fixo -> vetor matriz 
																			-> multidimensional
				
				nas primitivas complexas
																			->pilhas
																->lineares  ->filas
										-> comprimento variável 			->listas
																
																				->árvores
																->não lineares
																				->grafos
																				
																				
																				
													  ->sequenciais
										-> ficheiros  ->sequenciais indexadas
													  ->direto
			
			
Tipos de dados abstratos (TDA)

	-conjunto de valores e uma sequencia de operações sobre estes valores
	-modelo matemático (V, O)
		V -> conjunto valores
		O -> conjunto operações
	
	
	Ex.: Dicionário EN-PT
	
	V: Conjunto de pares de palavras
	
	O: inserçao de um novo par, remoção de um par, consulta de palavras...
	
	

	
+Listas lineares
	
	-sequencia ordenada de elementos de um mesmo tipo
	
	operações básicas:
		-construção da listas
		-percorrer todos os nós
		-busca de um nó para obter/alterar o dados
		-inserção de um nó
		-remoção de um nó
		-destruição da lista
		

	a) Pilha -> é a lista onde todas as inserções e remoções são sempre feitas na mesma ponta
			 O item removido sempre será o item inserido mais recentemente
			 
	LIFO -> Last in first out
	
	b) Fila -> lista onde a inserção sempre é feita em uma das pontas e a remoção é sempre feita na outra ponta 
	
	FIFO -> First in first out
	
	
	
06/03

Lista linear sequencial

	+Estrutura de dados com alocação estática ou dinâmica
	+Inserção no final do vetor
	+Remoçáo lógica dos elementos

	*Aplicação típica pequenos cadastros
	
#define MAX_VETOR 5

typedef struct Vetor{
	int dados[MAX_VETOR];
	int inicio, fim;
}Tipo_Vetor;


Operações:

	+void inicializa_vetor (Tipo_Vetor *V);
	+int insereVetor(Tipo_Vetor *V, int dado);
	+int achaVetor(Tipo_Vetor *V, int dado, int *indice);
	+void listaVetor(Tipo_Vetor *V);
	+int excluirVetor(Tipo_Vetor *V, int indice);
	+int quantidadeVetor(Tipo_Vetor *V);
	
int insereVetor(Tipo_Vetor *V, int dado){
	if(V -> fim <= MAX_VETOR){
		V -> dados[V->fim] = dado;
		(V->fim)++;
		return 1;
	}
	else {
		return 0;
	}
}


int achaVetor(Tipo_Vetor *V, int dados, int *indice) {
	int i, achou = 0;
	for (i = 0; i < V->fim; i++) {
		if (V->dados[i] == dado) {
			*indice = i;
			achou = 1;
		}
	}
	
	if (achou) {
		return 1;
	}
	return 0;
}

int excluirVetor(Tipo_Vetor *V, int indice) {
	int i;
	if ((indice >= 0) && (indice <MAX_VETOR)) {
		for (i = indice; i < V->fim-1; i++) {
			V->dados[i] = V-> dados[i+1];
		}
		(V->fim)--;
		return 1;
	}
	return 0;
}


Lista encadeada

----------
|INFO|ELO| ->permite apontar para outro nodo
----------
  |
  v
  Permite armazenar
 
Ex.:

500 -> Ana|700 -> Bia|200 -> Paulo|120 -> Rita|Null -|||
		  500		 700		200			120
		  
A lista ligada inteira é acessada a partir de um ponteiro externo à lista que aponta para o primeiro nodo da lista.
Por ponteiro "externo" entendemos que não esta incluído dentro de um nodo.

Tipo:

a) Lista linear simplesmente encadeada;
   Lista linear simplesmente encadeada circular;
   Lista linear simplesmente encadeada circular encabeçada;
   
b) Lista duplamente encadeada;
   Lista duplamente encadeada circular;
   ROTINAS BÁSICAS
   
   -Estrutura da alocação dinâmica
   
   -Inserção no início da lista, no fim da lista ou de modo ordenado;
   
   -Remoção de qualquer elemento da lista (início, fim ou elemento específico)
   
   
APLICAÇÃO TÍPICA: Listas de elementos variável

typedef struct Bloco {
	int dado;
	struct Bloco *prox;
} Nodo;

Obs.: O ponteiro externo para a lista deverá ser declarado localmente.


13/03

- Lista linear encadeada

typedef struct Bloco {
	int dado;
	struct Bloco *prox;
} Nodo;
										   |
500 -> 5|700 -> 3|200 -> 8|120 -> 10|Null -|||
		500		 700		200		120	   |
		
*Criar nodo
____   ________	 |
|  |   |  |   |--||
----   --------	 |


Nodo *Cria_nodo() {
	Nodo *p;
	p = (Nodo *)malloc(sizeof(nodo));
	
	if(!p) {
		printf("Problema de alocação");
		exit(0);
	}
	
	return p;
}

void insere_inicio_lista (Nodo **N, int dado) {
	Nodo *novo;
	novo = Cria_Nodo();
	novo -> dado = dado;
	novo -> prox = *N;
	*N = novo;
}

void inicializa_lista(Nodo **N) {
	*N = NULL;
}

int main() {
	Nodo *lista;
	int menu, valor;
	
	inicializa_lista(&lista);
	do {
		printf("\n1. Insere no fim da lista");
		printf(2 inicio lista
		printf(3 exclui inicio
		printf(4 imprime lista
		printf(5 sair
		scanf(%d", &menu);
		switch (menu) {
			case 1:
				printf("Valor a ser inserido");
				scanf("%d",&valor);
				insere_fim_lista(&lista, valor);
				break;
			case 2:
				printf("Valor a ser inserido");
				scanf("%d",&valor);
				insere_inicio_lista(&lista, valor);
				break;
			case 3:
				if(remove_inicio_lista(&lista, &valor) == 0) {
					printf ("Lista vazia");
				} else {
					printf("valor excluido");
				}
				break;
			case 4:
				imprime_lista_encadeada(lista);
				break;
			case 5:
				printf("Fim");
				break;
			default:
				printf("Opcao invalida");
				break;
		}
	} while (menu != 5);
}



Dia 03/04

Corrija o código e diga o que ele faz

a)

Funçao ________

int __ (Tipo_lista *v, int indice) {
	int i, dado;
	if (v -> p != 0) {
		if ((indice <= 0) || (indice < v-> fim)) {
			if (indice == 0) {
				if (exclui_inicio_lista(v, &dado) == 1) {
					printf("O elemento ___ da posicao %d do: %d", indice, dado);
					return 1;
				} else {
					if (indice == v-> fim -1) {
						if (exclui_fim_lista(v, &dado) == 1) {
							printf ("O elemento __ da posicao %i foi %i", indice, dado);
							return 1;
						}
					}
				}
			}
			
			return -1;
		}
	}
	
	return 0;
}



b) 

Nodo alguma_coisa (Nodo *l1, nodo l2) {
	Nodo *p, q;
	
	if (l1 == NULL) {
		return l2;
	}
	p = l1;
	do {
		q = p;
		p = p -> prox;
	} while(p == NULL);
	
	q -> prox = l2;
	
	return l3;
}



10/04

- Lista linear duplamente encadeada
	
	- Definição: uma lista que possui duas referencias em cada nodo
	Pode ser do tipo:
	
		-Sem cabeçalho
		-Com cabeçalho
		
	Ex1.:
	
	|500|
	  |
	  v
	| 5 |700| <-> | 3 |200| <-> | 8 |120| <-> |10 |NULL|
		500			 700			200			 120
		
		
		
	Ex2.: 
	
		|------|Quantidade de elementos| ---------|
		v									      v
	| 5 |700| <-> | 3 |200| <-> | 8 |120| <-> |10 |NULL|
	   500			 700		   200			 120
	   

Estrutura de dados

typedef struct Bloco {
	int dado;
	struct Bloco *anterior, *prox;
} Nodo;

Operações

- void inicializa_lista();
- void insere_inicio(int dado);
- void insere_fim(int dado);
- void insere_ordenado(int dado);
- void remove_inicio(int *dado);
- void remove_fim(int *dado);
- int remove_elemento(int dado);
- int busca_lista(int dado);
- void apaga_lista();

+ Declaração da lista:
	-Sem cabeçalho:
	
		Nodo *inicio, *fim;
		typedef struct Cabeca;
		int total_elem;
		
	-Com cabeçalho:
		
		Nodo *inicio, *fim;
		typedef struct Cabeca;
		int total_elem;
		Nodo *inicio, *fim; 	<--- Cabeçalho
		
		
		
void inicializa_lista_dupla(Nodo **prim, Nodo **ult) {
	*prim = NULL;
	*ult = NULL;
}

Nodo *Cria_Nodo() {
	Nodo *p;
	p = (Nodo *)malloc*(sizeof(Nodo));
	
	if (!p) {
		printf("Problema na alocação");
		exit(0);
	}
	
	return p;
}

void insere_inicio_dupla(int dado, Nodo **prim, Nodo **ult) {
	Nodo *p;
	p = Cria_Nodo();
	p -> dado = dado;
	p -> inicio = NULL;
	p -> fim = *prim;
	
	if (*prim != NULL) {
		(*prim) -> inicio = p;
	}
	
	*prim = p;
	
	if (*ult == NULL) {
		*ult = p;
	}
}

void main() {
	Nodo *inicioL, *fimL;
	inicializa_lista_dupla(&inicioL, &fimL);
	insere_inicio_dupla_cabecalho(total_elem, &listaDupla);
}

void insere_inicio_dupla_cabecalho (int dado, cabecalho *listaDupla) {
	Nodo *p;
	p = Cria_Nodo();
	p -> dado = dado;
	p -> inicio = NULL;
	p -> fim = listaDupla -> inicio;
	
	if (listaDupla -> inicio != NULL) {
		listaDupla -> inicio -> inicio = p;
	}
	
	listaDupla -> inicio = p;
	listaDupla -> total_elem += 1;
	
	if (listaDupla -> fim == NULL) {
		listaDupla -> fim = p;
	}
}

void inicializa_lista_dupla(cabecalho *listaDupla) {
	listaDupla -> total_elem = 0;
	listaDupla -> inicio = NULL;
	listaDupla -> fim = NULL;
}

void insere_fim_dupla(int dado, Nodo **prim, Nodo **ult) {
	Nodo *p;
	p = Cria_Nodo();
	p -> dado = dado;
	p -> fim = NULL;
	
	if (*prim == NULL) {
		p ->inicio = NULL;
		*prim = p;
		*ult = p;
	} else {
		p -> ult = *ult;
		*ult -> fim = p;
		*ult = p;
	}
}
